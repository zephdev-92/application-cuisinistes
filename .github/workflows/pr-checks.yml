name: Pull Request Checks

on:
  pull_request:
    branches: [ main ]  # Seulement les PRs vers main
    types: [opened, synchronize, reopened]

jobs:
  # Job de validation sp√©cial pour les PRs dev -> main
  validate-pr:
    runs-on: ubuntu-latest
    if: github.head_ref == 'dev'  # Seulement si la PR vient de dev

    steps:
    - name: Validate dev to main PR
      run: |
        echo "üîç Validation PR dev -> main"
        echo "Source: ${{ github.head_ref }}"
        echo "Target: ${{ github.base_ref }}"
        echo "‚úÖ PR structure valide"

  # Tests complets pour les PRs vers main
  pr-tests:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongosh
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7.4-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout PR code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # N√©cessaire pour valider tous les commits

    - name: Validate Git conventions
      run: |
        echo "üîç Validation des conventions Git"

        # Valider le nom de branche
        branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
        echo "üìç Branche: $branch"

        if [[ $branch != "main" ]] && [[ $branch != "dev" ]]; then
          if [[ ! $branch =~ ^(feature|fix|hotfix|refactor|docs|test|chore)/.+ ]]; then
            echo "‚ùå Nom de branche invalide: $branch"
            echo "Format requis: type/description (ex: feature/user-authentication)"
            exit 1
          fi
          echo "‚úÖ Nom de branche valide"
        fi

        # Valider tous les commits de la PR
        echo "üìù Validation des messages de commit..."
        commit_count=0
        invalid_commits=0

        while IFS= read -r commit_line; do
          if [[ -n "$commit_line" ]]; then
            commit_count=$((commit_count + 1))
            commit_hash=$(echo "$commit_line" | cut -d' ' -f1)
            commit_msg=$(echo "$commit_line" | cut -d' ' -f2-)

            echo "  Commit $commit_count: $commit_msg"

            # Ignorer les commits de merge automatiques
            if [[ $commit_msg =~ ^Merge.* ]] || [[ $commit_msg =~ ^Revert.* ]]; then
              echo "    ‚Ü≥ Commit de merge/revert ignor√©"
              continue
            fi

            # Valider le format Conventional Commits
            if [[ ! $commit_msg =~ ^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .{1,50}$ ]]; then
              echo "    ‚ùå Format invalide"
              invalid_commits=$((invalid_commits + 1))
            else
              echo "    ‚úÖ Format valide"
            fi
          fi
        done < <(git log --oneline origin/main..HEAD)

        echo ""
        echo "üìä R√©sultats:"
        echo "  ‚Ä¢ Commits analys√©s: $commit_count"
        echo "  ‚Ä¢ Commits invalides: $invalid_commits"

        if [[ $invalid_commits -gt 0 ]]; then
          echo ""
          echo "‚ùå $invalid_commits commit(s) ne respectent pas les conventions"
          echo ""
          echo "Format requis: type(scope): description"
          echo "Types autoris√©s: feat, fix, docs, style, refactor, test, chore, perf, ci, build, revert"
          echo ""
          echo "Exemples valides:"
          echo "  feat(auth): add user authentication"
          echo "  fix(api): resolve validation error"
          echo "  docs(readme): update installation guide"
          exit 1
        fi

        echo "‚úÖ Toutes les conventions Git sont respect√©es"

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci

    - name: Run linting
      working-directory: ./backend
      run: npm run lint

    - name: Run all tests
      working-directory: ./backend
      run: npm run test:coverage
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://root:password@localhost:27017/cuisine-app-test?authSource=admin
        JWT_SECRET: test-secret-key-for-ci
        AUDIT_LOG_DIR: ./tests/temp-logs

    - name: Security audit
      working-directory: ./backend
      run: |
        echo "üîç Security audit for PR"
        npm audit --audit-level high
        if [ $? -eq 0 ]; then
          echo "‚úÖ No high-level vulnerabilities"
        else
          echo "‚ùå Security issues found - PR blocked"
          exit 1
        fi

    - name: Build check
      working-directory: ./backend
      run: npm run build

    - name: Docker build check
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile.prod
        push: false
        tags: cuisine-backend:pr-${{ github.event.number }}

    - name: PR Summary
      run: |
        echo "## ‚úÖ PR Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Source**: \`${{ github.head_ref }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Target**: \`${{ github.base_ref }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Tests**: ‚úÖ Passed" >> $GITHUB_STEP_SUMMARY
        echo "- **Security**: ‚úÖ No high-level vulnerabilities" >> $GITHUB_STEP_SUMMARY
        echo "- **Build**: ‚úÖ Docker build successful" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üöÄ **Ready to merge to main**" >> $GITHUB_STEP_SUMMARY
