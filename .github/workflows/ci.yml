name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongosh
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7.4-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Run linting
      working-directory: ./backend
      run: npm run lint

    - name: Run unit tests
      working-directory: ./backend
      run: npm run test:unit
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://root:password@localhost:27017/cuisine-app-test?authSource=admin
        JWT_SECRET: test-secret-key-for-ci
        AUDIT_LOG_DIR: ./tests/temp-logs

    - name: Run integration tests
      working-directory: ./backend
      run: npm run test:integration
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://root:password@localhost:27017/cuisine-app-test?authSource=admin
        JWT_SECRET: test-secret-key-for-ci
        AUDIT_LOG_DIR: ./tests/temp-logs

    - name: Run all tests with coverage
      working-directory: ./backend
      run: npm run test:coverage
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://root:password@localhost:27017/cuisine-app-test?authSource=admin
        JWT_SECRET: test-secret-key-for-ci
        AUDIT_LOG_DIR: ./tests/temp-logs

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

    - name: Build backend
      working-directory: ./backend
      run: npm run build

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci

    - name: Run security audit
      working-directory: ./backend
      run: npm audit --audit-level moderate

    - name: Check for vulnerabilities
      working-directory: ./backend
      run: |
        # Check for high-level vulnerabilities and fail if any are found
        high_vulns=$(npm audit --parseable --audit-level high | wc -l)
        if [ "$high_vulns" -gt 0 ]; then
          echo "‚ùå Found $high_vulns high-level vulnerabilities"
          npm audit --audit-level high
          exit 1
        else
          echo "‚úÖ No high-level vulnerabilities found"
          exit 0
        fi

  docker:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile.prod
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/cuisine-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/cuisine-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "üöÄ D√©ploiement en production"
        echo "Image: ${{ secrets.DOCKER_USERNAME }}/cuisine-backend:${{ github.sha }}"
        # Ici vous pouvez ajouter vos scripts de d√©ploiement
        # Par exemple: mise √† jour des services Docker, Kubernetes, etc.

    - name: Notify deployment
      run: |
        echo "‚úÖ D√©ploiement termin√© avec succ√®s"
        echo "Version: ${{ github.sha }}"
        echo "URL: https://your-production-url.com"
