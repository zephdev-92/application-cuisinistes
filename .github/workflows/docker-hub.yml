name: Docker Hub Deploy

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: docker.io
  BACKEND_IMAGE_NAME: cuisine-backend
  FRONTEND_IMAGE_NAME: cuisine-frontend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile.prod
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend2
        file: ./frontend2/Dockerfile.prod
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Update docker-compose.prod.yml
      if: github.event_name != 'pull_request'
      run: |
        # Cr√©er une version mise √† jour du docker-compose.prod.yml avec les nouvelles images
        TAG=$(echo ${{ github.ref }} | sed 's/refs\/tags\///' | sed 's/refs\/heads\///')
        if [[ $TAG == "main" || $TAG == "master" ]]; then
          TAG="latest"
        fi

        echo "Mise √† jour avec le tag: $TAG"

        # Sauvegarder le docker-compose.prod.yml original
        cp docker-compose.prod.yml docker-compose.prod.yml.backup

        # Remplacer les images par les nouvelles versions
        sed -i "s|image: .*cuisine-backend.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/cuisine-backend:$TAG|g" docker-compose.prod.yml
        sed -i "s|image: .*cuisine-frontend.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/cuisine-frontend:$TAG|g" docker-compose.prod.yml

        echo "docker-compose.prod.yml mis √† jour:"
        cat docker-compose.prod.yml

    - name: Test images
      if: github.event_name != 'pull_request'
      run: |
        echo "Test de l'image backend..."
        docker run --rm ${{ secrets.DOCKERHUB_USERNAME }}/cuisine-backend:latest node --version

        echo "Test de l'image frontend..."
        docker run --rm ${{ secrets.DOCKERHUB_USERNAME }}/cuisine-frontend:latest node --version

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'

    steps:
    - name: Run Trivy vulnerability scanner on backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/cuisine-backend:latest
        format: 'sarif'
        output: 'backend-trivy-results.sarif'

    - name: Run Trivy vulnerability scanner on frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/cuisine-frontend:latest
        format: 'sarif'
        output: 'frontend-trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: '.'

  notify:
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: always() && github.event_name != 'pull_request'

    steps:
    - name: Notify deployment status
      run: |
        if [[ "${{ needs.build-and-push.result }}" == "success" ]]; then
          echo "‚úÖ Images Docker publi√©es avec succ√®s sur Docker Hub"
          echo "üîó Backend: https://hub.docker.com/r/${{ secrets.DOCKERHUB_USERNAME }}/cuisine-backend"
          echo "üîó Frontend: https://hub.docker.com/r/${{ secrets.DOCKERHUB_USERNAME }}/cuisine-frontend"
        else
          echo "‚ùå √âchec de la publication des images Docker"
        fi
