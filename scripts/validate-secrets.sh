#!/bin/bash

# üîç Script de Validation des Secrets GitHub
# V√©rifie que tous les secrets n√©cessaires sont configur√©s

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Variables
REPO_URL=""
MISSING_SECRETS=()
TOTAL_SECRETS=0
CONFIGURED_SECRETS=0

# Liste des secrets requis
REQUIRED_SECRETS=(
    # Docker Hub
    "DOCKER_USERNAME"
    "DOCKER_PASSWORD"

    # Base de donn√©es
    "MONGO_ROOT_USER"
    "MONGO_ROOT_PASSWORD"
    "MONGO_APP_USER"
    "MONGO_APP_PASSWORD"
    "MONGO_DATABASE"
    "MONGODB_URI"

    # S√©curit√©
    "JWT_SECRET"
    "JWT_EXPIRES_IN"
    "BCRYPT_SALT_ROUNDS"

    # Redis
    "REDIS_PASSWORD"

    # MinIO
    "MINIO_ACCESS_KEY"
    "MINIO_SECRET_KEY"
    "MINIO_BUCKET_NAME"

    # Email
    "EMAIL_HOST"
    "EMAIL_PORT"
    "EMAIL_USER"
    "EMAIL_PASS"

    # D√©ploiement
    "DEPLOY_HOST"
    "DEPLOY_USER"
    "DEPLOY_SSH_KEY"
    "DOMAIN_NAME"

    # S√©curit√© additionnelle
    "RATE_LIMIT_WINDOW_MS"
    "RATE_LIMIT_MAX_REQUESTS"
    "MAX_FILE_SIZE"
)

# Fonctions utilitaires
print_header() {
    echo -e "${BLUE}"
    echo "=============================================="
    echo "  üîê VALIDATION DES SECRETS GITHUB"
    echo "=============================================="
    echo -e "${NC}"
}

print_section() {
    echo -e "\n${BLUE}üìã $1${NC}"
    echo "----------------------------------------"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# V√©rifier si GitHub CLI est install√©
check_gh_cli() {
    if ! command -v gh &> /dev/null; then
        print_error "GitHub CLI (gh) n'est pas install√©"
        print_info "Installez-le avec: https://cli.github.com/"
        exit 1
    fi

    # V√©rifier l'authentification
    if ! gh auth status &> /dev/null; then
        print_error "Vous n'√™tes pas authentifi√© avec GitHub CLI"
        print_info "Connectez-vous avec: gh auth login"
        exit 1
    fi

    print_success "GitHub CLI configur√© et authentifi√©"
}

# Obtenir l'URL du repository
get_repo_info() {
    if command -v git &> /dev/null && git rev-parse --git-dir > /dev/null 2>&1; then
        REPO_URL=$(git config --get remote.origin.url | sed 's/.*github.com[:/]\([^/]*\/[^/]*\).*/\1/' | sed 's/\.git$//')
        print_info "Repository d√©tect√©: $REPO_URL"
    else
        print_warning "Impossible de d√©tecter le repository automatiquement"
        read -p "Entrez l'URL du repository (format: owner/repo): " REPO_URL
    fi
}

# V√©rifier les secrets
check_secrets() {
    print_section "V√©rification des secrets"

    # Obtenir la liste des secrets configur√©s
    local configured_secrets_list
    configured_secrets_list=$(gh secret list -R "$REPO_URL" --json name -q '.[].name' 2>/dev/null || echo "")

    for secret in "${REQUIRED_SECRETS[@]}"; do
        TOTAL_SECRETS=$((TOTAL_SECRETS + 1))

        if echo "$configured_secrets_list" | grep -q "^$secret$"; then
            print_success "$secret"
            CONFIGURED_SECRETS=$((CONFIGURED_SECRETS + 1))
        else
            print_error "$secret - MANQUANT"
            MISSING_SECRETS+=("$secret")
        fi
    done
}

# V√©rifier les environnements
check_environments() {
    print_section "V√©rification des environnements"

    local environments
    environments=$(gh api "repos/$REPO_URL/environments" --jq '.[].name' 2>/dev/null || echo "")

    if echo "$environments" | grep -q "production"; then
        print_success "Environnement 'production' configur√©"
    else
        print_warning "Environnement 'production' non configur√©"
        print_info "Cr√©ez-le dans Settings > Environments"
    fi

    if echo "$environments" | grep -q "staging"; then
        print_success "Environnement 'staging' configur√©"
    else
        print_warning "Environnement 'staging' non configur√© (optionnel)"
    fi
}

# V√©rifier les workflows
check_workflows() {
    print_section "V√©rification des workflows"

    local workflows_dir=".github/workflows"

    if [[ -f "$workflows_dir/ci.yml" ]]; then
        print_success "Workflow CI/CD configur√©"
    else
        print_error "Workflow CI/CD manquant: $workflows_dir/ci.yml"
    fi

    if [[ -f "$workflows_dir/pr-checks.yml" ]]; then
        print_success "Workflow PR checks configur√©"
    else
        print_warning "Workflow PR checks manquant: $workflows_dir/pr-checks.yml"
    fi
}

# Validation de la s√©curit√© des secrets
validate_secret_security() {
    print_section "Validation de la s√©curit√©"

    # V√©rifier que les secrets ne sont pas dans .env ou autres fichiers
    local insecure_files=(
        ".env"
        ".env.local"
        ".env.production"
        "docker-compose.override.yml"
    )

    for file in "${insecure_files[@]}"; do
        if [[ -f "$file" ]]; then
            # Chercher des patterns de secrets
            if grep -q "JWT_SECRET\|MONGO.*PASSWORD\|REDIS_PASSWORD" "$file" 2>/dev/null; then
                print_error "Secrets trouv√©s dans $file - RISQUE DE S√âCURIT√â"
            else
                print_success "$file ne contient pas de secrets en dur"
            fi
        fi
    done

    # V√©rifier .gitignore
    if [[ -f ".gitignore" ]] && grep -q "\.env" ".gitignore"; then
        print_success "Fichiers .env ignor√©s par Git"
    else
        print_warning "Ajoutez .env* √† votre .gitignore"
    fi
}

# G√©n√©rer un rapport
generate_report() {
    print_section "Rapport de validation"

    local success_rate=$((CONFIGURED_SECRETS * 100 / TOTAL_SECRETS))

    echo -e "üìä ${BLUE}Statistiques:${NC}"
    echo "   ‚Ä¢ Secrets configur√©s: $CONFIGURED_SECRETS/$TOTAL_SECRETS ($success_rate%)"
    echo "   ‚Ä¢ Secrets manquants: ${#MISSING_SECRETS[@]}"

    if [[ ${#MISSING_SECRETS[@]} -gt 0 ]]; then
        echo -e "\nüö® ${RED}Secrets manquants:${NC}"
        for secret in "${MISSING_SECRETS[@]}"; do
            echo "   ‚Ä¢ $secret"
        done

        echo -e "\nüí° ${YELLOW}Actions recommand√©es:${NC}"
        echo "   1. Allez dans Settings > Secrets and variables > Actions"
        echo "   2. Cliquez sur 'New repository secret'"
        echo "   3. Ajoutez chaque secret manquant"
        echo "   4. Consultez docs/GITHUB_SECRETS_SETUP.md pour les valeurs"
    fi

    if [[ $success_rate -eq 100 ]]; then
        print_success "üéâ Tous les secrets sont configur√©s!"
        echo -e "\n${GREEN}‚ú® Votre CI/CD est pr√™t pour le d√©ploiement!${NC}"
    else
        print_warning "‚ö†Ô∏è  Configuration incompl√®te"
        echo -e "\n${YELLOW}üîß Configurez les secrets manquants avant le d√©ploiement${NC}"
    fi
}

# Afficher les commandes de g√©n√©ration de secrets
show_secret_generation() {
    if [[ ${#MISSING_SECRETS[@]} -gt 0 ]]; then
        print_section "G√©n√©ration de secrets"

        echo -e "${BLUE}Commandes pour g√©n√©rer des secrets s√©curis√©s:${NC}\n"

        for secret in "${MISSING_SECRETS[@]}"; do
            case $secret in
                "JWT_SECRET")
                    echo "# $secret"
                    echo "openssl rand -base64 64"
                    echo ""
                    ;;
                *"PASSWORD"*)
                    echo "# $secret"
                    echo "openssl rand -base64 32"
                    echo ""
                    ;;
                *"KEY"* | *"SECRET"*)
                    echo "# $secret"
                    echo "openssl rand -base64 32"
                    echo ""
                    ;;
            esac
        done
    fi
}

# Fonction principale
main() {
    print_header

    check_gh_cli
    get_repo_info
    check_secrets
    check_environments
    check_workflows
    validate_secret_security

    echo ""
    generate_report
    show_secret_generation

    echo -e "\n${BLUE}üìö Documentation:${NC}"
    echo "   ‚Ä¢ Guide complet: docs/GITHUB_SECRETS_SETUP.md"
    echo "   ‚Ä¢ Configuration Docker: docker-compose.prod.yml"
    echo "   ‚Ä¢ Scripts de d√©ploiement: scripts/deploy.sh"

    # Code de sortie bas√© sur le succ√®s
    if [[ ${#MISSING_SECRETS[@]} -eq 0 ]]; then
        exit 0
    else
        exit 1
    fi
}

# Ex√©cution
main "$@"
