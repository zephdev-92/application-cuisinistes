// Script d'initialisation MongoDB pour la production

// Connexion en tant qu'admin
db = db.getSiblingDB('admin');

// V√©rifier les variables d'environnement
const dbName = process.env.MONGO_DATABASE || 'cuisine-app';
const appUser = process.env.MONGO_APP_USER || 'app_user';
const appPassword = process.env.MONGO_APP_PASSWORD || 'app_password';

print('üîÑ Initialisation de la base de donn√©es MongoDB...');
print(`üìä Base de donn√©es: ${dbName}`);
print(`üë§ Utilisateur applicatif: ${appUser}`);

// Passer √† la base de donn√©es de l'application
db = db.getSiblingDB(dbName);

// Cr√©er l'utilisateur de l'application s'il n'existe pas
try {
  db.createUser({
    user: appUser,
    pwd: appPassword,
    roles: [
      {
        role: 'readWrite',
        db: dbName
      },
      {
        role: 'dbAdmin',
        db: dbName
      }
    ]
  });
  print(`‚úÖ Utilisateur ${appUser} cr√©√© avec succ√®s`);
} catch (error) {
  if (error.code === 51003) {
    print(`‚ÑπÔ∏è  L'utilisateur ${appUser} existe d√©j√†`);
  } else {
    print(`‚ùå Erreur lors de la cr√©ation de l'utilisateur: ${error.message}`);
    throw error;
  }
}

// Cr√©er les index essentiels
print('üîç Cr√©ation des index...');

// Index pour les utilisateurs
try {
  db.users.createIndex({ email: 1 }, { unique: true });
  db.users.createIndex({ role: 1 });
  db.users.createIndex({ active: 1 });
  db.users.createIndex({ createdAt: -1 });
  print('‚úÖ Index utilisateurs cr√©√©s');
} catch (error) {
  print(`‚ö†Ô∏è  Erreur index utilisateurs: ${error.message}`);
}

// Index pour les clients
try {
  db.clients.createIndex({ email: 1 });
  db.clients.createIndex({ createdBy: 1 });
  db.clients.createIndex({ createdAt: -1 });
  db.clients.createIndex({
    firstName: 'text',
    lastName: 'text',
    email: 'text'
  }, {
    name: 'client_search_index'
  });
  print('‚úÖ Index clients cr√©√©s');
} catch (error) {
  print(`‚ö†Ô∏è  Erreur index clients: ${error.message}`);
}

// Index pour les showrooms
try {
  db.showrooms.createIndex({ name: 1 });
  db.showrooms.createIndex({ 'address.city': 1 });
  db.showrooms.createIndex({ managers: 1 });
  db.showrooms.createIndex({ providers: 1 });
  print('‚úÖ Index showrooms cr√©√©s');
} catch (error) {
  print(`‚ö†Ô∏è  Erreur index showrooms: ${error.message}`);
}

// Index pour les sessions/tokens (si utilis√©)
try {
  db.sessions.createIndex({ expiresAt: 1 }, { expireAfterSeconds: 0 });
  db.sessions.createIndex({ userId: 1 });
  print('‚úÖ Index sessions cr√©√©s');
} catch (error) {
  print(`‚ö†Ô∏è  Erreur index sessions: ${error.message}`);
}

print('üéâ Initialisation MongoDB termin√©e avec succ√®s!');
